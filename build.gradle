buildscript {
    repositories {
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.20.0'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.20.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.9.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.79.0'
        classpath 'com.palantir.gradle.conjure:gradle-conjure:5.21.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.14.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
    }
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.baseline-java-versions'

version System.env.CIRCLE_TAG ?: gitVersion()

allprojects {
    apply plugin: 'com.palantir.java-format'
    version rootProject.version
    group 'com.palantir.metricschema'

    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'com.palantir.baseline-class-uniqueness'

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Werror']
    }

    tasks.check.dependsOn(javadoc)

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
            because 'allows JUnit 3 and JUnit 4 tests to run'
        }
    }
}

javaVersions {
    libraryTarget = 11
    runtime = 17
}
